#!/usr/bin/env python

import os
import os.path
import sys
import subprocess
import signal

default_timeout = 300

currdir = os.path.abspath(os.path.dirname(__file__))

config = {
    "knapsack": {
        "small": ["50"],
        "medium": ["500"],
        "big": ["1000"],
        "all": ["50", "100", "500", "1000"],
    },
    "nqueens": {
        "small": ["400"],
        "medium": ["800"],
        "big": ["1000"],
        "all": ["400", "600", "800", "1000"],
    },
    "pmedian": {
        "small": [["160", "1"]],
        "medium": [["640", "1"]],
        "big": [["1280", "1"]],
        "all": [["160", "1"], ["320", "1"], ["640", "1"], ["1280", "1"]],
    },
    "lqcp": {
        "small": ["500"],
        "medium": ["700"],
        "big": ["1500"],
        "all": ["500", "1000", "1500", "2000"],
    },
    "fac": {
        "small": ["25"],
        "medium": ["50"],
        "big": ["100"],
        "all": ["25", "50", "75", "100"],
    },
    "srosenbr": {"small": ["10"], "medium": ["1000"], "big": ["100000"]},
}

all_models = {
"coek": [
    "knapsack-array",
    "knapsack-scalar",
    "nqueens-array",
    "nqueens-scalar",
    "pmedian-array",
    "pmedian-scalar",
    "fac-array",
    "fac-scalar",
    "lqcp-array",
    "lqcp-scalar",
    # "lqcp-map",
    # "lqcp-compact"         Problem constructing this model
],

"gurobi": [
    "knapsack-scalar",
    "nqueens-scalar",
    "pmedian-scalar",
    "lqcp",
    "fac",
],

"poek": [
    "fac",
    "fac-affine",
    "knapsack",
    "knapsack-affine",
    "lqcp",
    "lqcp-affine",
    "nqueens",
    "nqueens-affine",
    "pmedian",
    "pmedian-affine",
],

"pyomo": [
    "fac",
    "fac-linear",
    "knapsack",
    "knapsack-linear",
    "lqcp",
    "lqcp-linear",
    "nqueens",
    "nqueens-linear",
    "pmedian",
    "pmedian-linear",
]
}

all_coek_models = all_models["coek"]
all_gurobi_models = all_models["gurobi"]
all_poek_models = all_models["poek"]
all_pyomo_models = all_models["pyomo"]

all_hybrid_components_only_models = list(all_pyomo_models)

all_hybrid_expression_wrappers_models = list(all_pyomo_models)


def get_filedata(fname):
    with open(fname, "r") as INPUT:
        for line in INPUT.readlines():
            line.strip()
            tmp = line.split(" ")
            yield tmp[0], float(tmp[1])


def test_writer(
    *,
    test_type,
    models,
    suffixes,
    executable,
    subdir,
    timeout=default_timeout,
    ntrials=1,
    errors=[]
):
    if not os.path.exists("results"):
        os.mkdir("results")
    if not os.path.exists("results/writer"):
        os.mkdir("results/writer")
    if not os.path.exists("results/writer/" + subdir):
        os.mkdir("results/writer/" + subdir)

    print("")
    print("")
    print("TESTING ARGUMENTS")
    print("  test_type:  " + test_type)
    print("  models:     " + " ".join(models))
    print("  suffixes:   " + " ".join(suffixes))
    print("  executable: " + executable)
    print("  subdir:     " + subdir)
    print("  timeout:    " + str(timeout))
    print("  ntrials:    " + str(ntrials))

    for model in models:
        config_name = None
        for name in config:
            if model.startswith(name):
                config_name = name
        if config_name is None:
            print("Ignoring unknown model {}".format(model))
            continue

        print("\nTesting model {}".format(model))
        if test_type in config[config_name]:
            tests = config[config_name][test_type]
        else:
            print("Unknown test type {}".format(test_type))
            continue

        for test_args in tests:
            if type(test_args) is list:
                cmd = [model] + test_args
            else:
                cmd = [model] + [test_args]
            for suffix in suffixes:
                for trial in range(ntrials):
                    prefix = (
                        "results/writer/"
                        + subdir
                        + "/"
                        + "_".join([suffix] + cmd)
                        + "."
                        + str(trial)
                    )
                    outfile = prefix + "." + suffix
                    timefile = prefix + ".out"

                    if os.path.exists(timefile):
                        if not os.path.exists(outfile):
                            cflag = False
                            for k, v in get_filedata(timefile):
                                if k == "timeout":
                                    cflag = True
                                    break
                        else:
                            cflag = True
                        if cflag:
                            print(". SKIP {}: results exist".format(timefile))
                            continue

                    run = [
                        "/usr/bin/time",
                        "-p",
                        "-o",
                        timefile,
                        executable,
                        outfile,
                    ] + cmd
                    try:
                        p = subprocess.Popen(
                            run,
                            start_new_session=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                        )
                        outs, errs = p.communicate(timeout=timeout)
                        results = outs + errs

                        if p.returncode == 0:
                            print(
                                ". OK {}: rc={} output='{}'".format(
                                    timefile, p.returncode, results
                                )
                            )
                        else:
                            print(
                                ". ERROR (test_writer) {}:\n\tcmd={} rc={} output='{}'".format(
                                    timefile, " ".join(run), p.returncode, results
                                )
                            )
                            if os.path.exists(timefile):
                                os.remove(timefile)
                            errors.append(timefile)
                    except subprocess.TimeoutExpired:
                        os.killpg(os.getpgid(p.pid), signal.SIGTERM)
                        errors.append(timefile)
                        print(". TIMEOUT (test_writer) {} cmd={}".format(timefile, " ".join(run)))
                        with open(timefile, "w") as OUTPUT:
                            OUTPUT.write("timeout {}".format(timeout))


def test_solve0(
    *,
    test_type,
    models,
    solvers,
    executable,
    subdir,
    timeout=default_timeout,
    ntrials=1,
    errors=[]
):
    if not os.path.exists("results"):
        os.mkdir("results")
    if not os.path.exists("results/solve0"):
        os.mkdir("results/solve0")
    if not os.path.exists("results/solve0/" + subdir):
        os.mkdir("results/solve0/" + subdir)

    print("")
    print("")
    print("TESTING ARGUMENTS")
    print("  test_type:  " + test_type)
    print("  models:     " + " ".join(models))
    print("  solvers:    " + " ".join(solvers))
    print("  executable: " + executable)
    print("  subdir:     " + subdir)
    print("  timeout:    " + str(timeout))
    print("  ntrials:    " + str(ntrials))

    for model in models:
        config_name = None
        for name in config:
            if model.startswith(name):
                config_name = name
        if config_name is None:
            print("Ignoring unknown model {}".format(model))
            continue

        print("\nTesting model {}".format(model))
        if test_type in config[config_name]:
            tests = config[config_name][test_type]
        else:
            print("Unknown test type {}".format(test_type))
            continue

        for test_args in tests:
            if type(test_args) is list:
                cmd = [model] + test_args
            else:
                cmd = [model] + [test_args]
            for solver in solvers:
                for trial in range(ntrials):
                    prefix = (
                        "results/solve0/"
                        + subdir
                        + "/"
                        + "_".join([solver] + cmd)
                        + "."
                        + str(trial)
                    )
                    logfile = prefix + ".log"
                    timefile = prefix + ".out"

                    if os.path.exists(timefile):
                        print(". SKIP {}: timefile exists".format(timefile))
                        continue

                    try:
                        run = [
                            "/usr/bin/time",
                            "-p",
                            "-o",
                            timefile,
                            executable,
                            solver,
                        ] + cmd
                        p = subprocess.Popen(
                            run,
                            start_new_session=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                        )
                        outs, errs = p.communicate(timeout=timeout)
                        results = outs + errs

                        with open(logfile, "wb") as OUTPUT:
                            OUTPUT.write(results)
                        if p.returncode == 0:
                            print(". OK {}: rc={}".format(timefile, p.returncode))
                        else:
                            print(". ERROR (test_solve0) {}:\n\tcmd={} rc={}".format(timefile, " ".join(run), p.returncode))
                            if os.path.exists(timefile):
                                os.remove(timefile)
                            errors.append(timefile)
                    except subprocess.TimeoutExpired:
                        os.killpg(os.getpgid(p.pid), signal.SIGTERM)
                        errors.append(timefile)
                        print(". TIMEOUT (test_solve0) {} cmd={}".format(timefile, " ".join(run)))
                        with open(timefile, "w") as OUTPUT:
                            OUTPUT.write("timeout {}".format(timeout))


if __name__ == "__main__":
    import sys

    if len(sys.argv) == 1:
        print("run <tests> [<num-trials>]")
        sys.exit(1)

    if len(sys.argv) == 3:
        ntrials = int(sys.argv[2])
    else:
        ntrials = 1

    if not os.path.exists("test/aml_comparisons/coek/coek_writer"):
        print("Must execute 'run' in the coek build directory")
        sys.exit(1)
    build_dir = os.path.abspath(".")

    errors = []

    if ':' in sys.argv[1]:
        args = sys.argv[1].split(':')
        if args[1] == "solve0":
            amls = ['coek','poek','pyomo','gurobi']
            for aml in amls:
                if aml in ['coek','gurobi']:
                    executable = os.path.join(build_dir, f"test/aml_comparisons/{aml}/{aml}_solve0")
                else:
                    executable = os.path.join(build_dir, f"../test/aml_comparisons/{aml}/{aml}_solve0")
                test_solve0(
                    test_type=args[0],
                    models=all_models[aml],
                    solvers=["gurobi"],
                    executable=executable,
                    subdir=aml,
                    ntrials=ntrials,
                    errors=errors,
                )
        elif args[1] == "lp_writer":
            amls = ['coek','poek','pyomo','gurobi']
            for aml in amls:
                if aml in ['coek','gurobi']:
                    executable = os.path.join(build_dir, f"test/aml_comparisons/{aml}/{aml}_writer")
                else:
                    executable = os.path.join(build_dir, f"../test/aml_comparisons/{aml}/{aml}_writer")
                test_writer(
                    test_type=args[0],
                    models=all_models[aml],
                    suffixes=["lp"],
                    executable=executable,
                    subdir=aml,
                    ntrials=ntrials,
                    errors=errors,
                )

    elif sys.argv[1] == "dev":
        test_solve0(
            test_type="small",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "bench_coek":
        test_solve0(
            test_type="medium",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="medium",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="medium",
            models=all_coek_models,
            suffixes=["lp"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="medium",
            models=all_gurobi_models,
            suffixes=["lp"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_writer"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "bench_coek_big":
        test_solve0(
            test_type="big",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="big",
            models=all_coek_models,
            suffixes=["lp"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="big",
            models=all_gurobi_models,
            suffixes=["lp"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_writer"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "big_lp_writer":
        test_writer(
            test_type="big",
            models=all_coek_models,
            suffixes=["lp"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="big",
            models=all_gurobi_models,
            suffixes=["lp"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_writer"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="big",
            models=all_poek_models,
            suffixes=["lp"],
            executable="../poek/poek_writer",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="big",
            models=all_pyomo_models,
            suffixes=["lp"],
            executable="../pyomo/pyomo_writer",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "smoke_lp_writer":
        test_writer(
            test_type="small",
            models=all_coek_models,
            suffixes=["lp"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="small",
            models=all_gurobi_models,
            suffixes=["lp"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_writer"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="small",
            models=all_poek_models,
            suffixes=["lp"],
            executable="../poek/poek_writer",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="small",
            models=all_pyomo_models,
            suffixes=["lp"],
            executable="../pyomo/pyomo_writer",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "bench_lp_writer":
        test_writer(
            test_type="all",
            models=all_coek_models,
            suffixes=["lp"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="all",
            models=all_gurobi_models,
            suffixes=["lp"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_writer"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="all",
            models=all_poek_models,
            suffixes=["lp"],
            executable="../poek/poek_writer",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="all",
            models=all_pyomo_models,
            suffixes=["lp"],
            executable="../pyomo/pyomo_writer",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "smoke_nl_writer":
        test_writer(
            test_type="small",
            models=all_coek_models,
            suffixes=["nl"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="small",
            models=all_poek_models,
            suffixes=["nl"],
            executable="../poek/poek_writer",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="small",
            models=all_pyomo_models,
            suffixes=["nl"],
            executable="../pyomo/pyomo_writer",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "bench_nl_writer":
        test_writer(
            test_type="all",
            models=all_coek_models,
            suffixes=["nl"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_writer"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="all",
            models=all_poek_models,
            suffixes=["nl"],
            executable="../poek/poek_writer",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_writer(
            test_type="all",
            models=all_pyomo_models,
            suffixes=["nl"],
            executable="../pyomo/pyomo_writer",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "big_solve0":
        test_solve0(
            test_type="big",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_poek_models,
            solvers=["gurobi"],
            executable="../poek/poek_solve0",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_pyomo_models,
            solvers=["gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_pyomo_models,
            solvers=["appsi-gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="appsi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_hybrid_components_only_models,
            solvers=["gurobi"],
            executable="../hybrid_components_only/hybrid_components_only_solve0",
            subdir="hybrid_components_only",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="big",
            models=all_hybrid_expression_wrappers_models,
            solvers=["gurobi"],
            executable="../hybrid_expression_wrappers/hybrid_expression_wrappers_solve0",
            subdir="hybrid_expression_wrappers",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "smoke_solve0":
        test_solve0(
            test_type="small",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_poek_models,
            solvers=["gurobi"],
            executable="../poek/poek_solve0",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_pyomo_models,
            solvers=["gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_pyomo_models,
            solvers=["appsi-gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="appsi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_hybrid_components_only_models,
            solvers=["gurobi"],
            executable="../hybrid_components_only/hybrid_components_only_solve0",
            subdir="hybrid_components_only",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="small",
            models=all_hybrid_expression_wrappers_models,
            solvers=["gurobi"],
            executable="../hybrid_expression_wrappers/hybrid_expression_wrappers_solve0",
            subdir="hybrid_expression_wrappers",
            ntrials=ntrials,
            errors=errors,
        )

    elif sys.argv[1] == "bench_solve0":
        test_solve0(
            test_type="all",
            models=all_coek_models,
            solvers=["gurobi"],
            executable=os.path.join(build_dir, "test/aml_comparisons/coek/coek_solve0"),
            subdir="coek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_gurobi_models,
            solvers=["gurobi"],
            executable=os.path.join(
                build_dir, "test/aml_comparisons/gurobi/gurobi_solve0"
            ),
            subdir="gurobi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_poek_models,
            solvers=["gurobi"],
            executable="../poek/poek_solve0",
            subdir="poek",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_pyomo_models,
            solvers=["gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="pyomo",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_pyomo_models,
            solvers=["appsi-gurobi"],
            executable="../pyomo/pyomo_solve0",
            subdir="appsi",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_hybrid_components_only_models,
            solvers=["gurobi"],
            executable="../hybrid_components_only/hybrid_components_only_solve0",
            subdir="hybrid_components_only",
            ntrials=ntrials,
            errors=errors,
        )
        test_solve0(
            test_type="all",
            models=all_hybrid_expression_wrappers_models,
            solvers=["gurobi"],
            executable="../hybrid_expression_wrappers/hybrid_expression_wrappers_solve0",
            subdir="hybrid_expression_wrappers",
            ntrials=ntrials,
            errors=errors,
        )

    else:
        print("UNKNOWN TEST: " + sys.argv[1])

    print("")
    print("")
    if len(errors) == 0:
        print("NO ERRORS!")
    else:
        print("COLLECTED ERRORS")
        for err in errors:
            print(" ", err)
    print("")
